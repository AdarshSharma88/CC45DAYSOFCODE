//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long long maxSubarraySum(int arr[], int n){
        
        long long curr_sum=0;
        long long max_sum=arr[0];
        // vector<long long>num;
        
     for(int i=0;i<n;i++)
     {
        //  num.push_back(arr[i]);
         
        //  for(int j=i;j<n;j++)
        //  {
          curr_sum+=arr[i];  
         
        //   if(sum>max)
        //   {
        //       max = sum;
        //   }
          max_sum = max(max_sum,curr_sum);
           if(curr_sum < 0)
          {
              curr_sum = 0;
          }
          //num.push_back(sum);
        //  }
         
         
     }
     
     return max_sum;
    // long long a = *max_element(num.begin(),num.end());
   //  return a;
        
        // Your code here
    }
};

//{ Driver Code Starts.

int main()
{
    int t,n;
    
    cin>>t; //input testcases
    while(t--) //while testcases exist
    {
        
        cin>>n; //input size of array
        
        int a[n];
        
        for(int i=0;i<n;i++)
            cin>>a[i]; //inputting elements of array
            
        Solution ob;
        
        cout << ob.maxSubarraySum(a, n) << endl;
    }
}

// } Driver Code Ends
