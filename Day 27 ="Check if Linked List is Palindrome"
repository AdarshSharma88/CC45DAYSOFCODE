//{ Driver Code Starts
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <stack>
using namespace std;
/* Link list Node */
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};




// } Driver Code Ends
/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution{
   
  public:
  
    //   Node* getMid(Node* head){
    //     Node* slow = head;
    //     Node* fast = head;
        
    //     while(fast->next!=NULL && fast->next->next!=NULL)
    //     {
    //         slow = slow->next;
    //         fast = fast->next->next;
    //     }
    //     return slow;
    // }
    
    //  Node*  reverse(Node* head)
    // {
    //   Node* prev = NULL;
    //   Node* current = head;
       
    //   while(current!=NULL){
    //       Node* next = current->next;
    //       current->next = prev;
    //       prev = current;
    //       current = next;
    //   }
    //   return prev;
    // }
    
    // bool isPalindrome(Node *head)
    // {
    //     if(head==NULL || head->next==NULL)
    //     {
    //         return true;
    //     }
        
    //     Node* real = head;
    //     Node* middle = NULL;
    //     middle = getMid(head);
    //     Node* rev = reverse(middle->next);
    //     while(real!=NULL){
    //         if(rev->data!= real->data){
    //             return false;
    //         }
    //         rev = rev->next;
    //         real = real->next;
    //     }

    //     return true;
    // }
      Node * reverseLinkedList(Node *n) {
        Node *tmp = n, *prev = NULL;
        while(tmp != NULL) {
            Node *next = tmp->next;
            tmp->next = prev;
            prev = tmp;
            tmp = next;
        }
        return prev;
    }
    
    Node *findMidNodeLinkedList(Node *head) {
        Node *slow = head, *fast = head;
        while(fast->next != NULL && fast->next->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    bool isPalindrome(Node *head)
    {
        //Your code here
        if(head == NULL || head->next == NULL)
            return true;
        Node *tmp = head, *mid = NULL;
        mid = findMidNodeLinkedList(head);
        Node *revMid = reverseLinkedList(mid->next);
        while(revMid != NULL) {
            if(revMid->data != tmp->data)
                return false;
            revMid = revMid->next;
            tmp = tmp->next;
        }
        return true;
    }
};



//{ Driver Code Starts.
/* Driver program to test above function*/
int main()
{
  int T,i,n,l,firstdata;
    cin>>T;
    while(T--)
    {
        
        struct Node *head = NULL,  *tail = NULL;
        cin>>n;
        // taking first data of LL
        cin>>firstdata;
        head = new Node(firstdata);
        tail = head;
        // taking remaining data of LL
        for(i=1;i<n;i++)
        {
            cin>>l;
            tail->next = new Node(l);
            tail = tail->next;
        }
    Solution obj;
   	cout<<obj.isPalindrome(head)<<endl;
    }
    return 0;
}


// } Driver Code Ends
